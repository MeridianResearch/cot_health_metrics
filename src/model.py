from transformers import AutoTokenizer, AutoModelForCausalLM
from transformers import AutoConfig
import torch
from dataclasses import dataclass
from token_utils import TokenUtils
from src.model_prompts import ModelPromptBuilder
from typing import Optional, List, Callable
from config import ModelConfig
from model_factory import ModelComponentFactory


class Model:
    def __init__(self, model_name: str, cache_dir="/tmp/cache"):
        self.model_name = model_name
        self.cache_dir = cache_dir

    def get_utils(self):
        raise NotImplementedError("Subclasses must implement this method")

    def make_prompt(self, question_id, question, custom_instruction=None):
        raise NotImplementedError("Subclasses must implement this method")

    def do_generate(self, question_id, prompt, max_new_tokens=4096):
        raise NotImplementedError("Subclasses must implement this method")

    def generate_cot_response(self, question_id, question, max_new_tokens=4096):
        raise NotImplementedError("Subclasses must implement this method")

    def evaluate_cot_response(self, question_id, prompt, max_new_tokens=4096):
        raise NotImplementedError("Subclasses must implement this method")

    def get_log_probs(self, sequences: torch.Tensor):
        raise NotImplementedError("Subclasses must implement this method")

    def do_split(self, sequences):
        raise NotImplementedError("Subclasses must implement this method")


class Model:
    def __init__(self, model_name: str, cache_dir="/tmp/cache"):
        self.model_name = model_name
        self.cache_dir = cache_dir

    def get_utils(self):
        raise NotImplementedError("Subclasses must implement this method")

    def make_prompt(self, question_id, question, custom_instruction=None):
        raise NotImplementedError("Subclasses must implement this method")

    def do_generate(self, question_id, prompt, max_new_tokens=4096):
        raise NotImplementedError("Subclasses must implement this method")

    def generate_cot_response(self, question_id, question, max_new_tokens=4096):
        raise NotImplementedError("Subclasses must implement this method")

    def evaluate_cot_response(self, question_id, prompt, max_new_tokens=4096):
        raise NotImplementedError("Subclasses must implement this method")

    def get_log_probs(self, sequences: torch.Tensor):
        raise NotImplementedError("Subclasses must implement this method")

    def do_split(self, sequences):
        raise NotImplementedError("Subclasses must implement this method")


@dataclass
class ModelResponse:
    """
    question: original question
    prompt: Question: {question}+{custom_instruction}+<think>
    cot: chain of thought
    answer: answer generated by the model
    """
    question_id: Optional[str]
    question: str
    prompt: str
    cot: str
    answer: str
    raw_output: str

    def __post_init__(self):
        self.basic_pair = (self.cot, self.answer)

    def old__str__(self):
        return f"""
ModelResponse(
    Question: {self.question},
    Prompt: {self._encode(self.prompt)}
    CoT: {self._encode(self.cot)}
    Answer: {self._encode(self.answer)}
)
"""

    def print(self):
        print(f"Question: {self._encode(self.question)}")
        print("\n")
        print(f"Prompt: {self._encode(self.prompt)}")
        print("\n")
        print("CoT: " + self._encode(self.cot))
        print("\n")
        print(f"Answer: {self._encode(self.answer)}")
        print("\n")


class CoTModel(Model):
    def __init__(self, model_name: str,
                 component_factory: ModelComponentFactory = None,
                 cache_dir="/tmp/cache",
                 adapter_path=None
                 ):
        self.adapter_path = adapter_path
        super().__init__(model_name, cache_dir)

        if component_factory is None:
            self.component_factory = ModelComponentFactory(model_name)
        else:
            self.component_factory = component_factory

        if not ModelConfig.is_supported(model_name):
            print(f"ERROR: model {model_name} is not in supported list {ModelConfig.SUPPORTED_MODELS}")
            exit(1)

        try:
            (self.tokenizer, self.model) = self._load_model(model_name, cache_dir)
            self.utils = TokenUtils(self.model, self.tokenizer)
        except Exception as e:
            print(f"Error loading model {model_name}: {e}")
            raise

    def _load_model(self, model_name, cache_dir):
        # Set token for gated models
        import os
        token = os.environ.get('HF_TOKEN') or os.environ.get('HUGGINGFACE_HUB_TOKEN')

        config = AutoConfig.from_pretrained(
            model_name,
            cache_dir=cache_dir,
            trust_remote_code=True,
            token=token
        )

        tokenizer = AutoTokenizer.from_pretrained(
            model_name,
            cache_dir=cache_dir,
            token=token
        )
        model = AutoModelForCausalLM.from_pretrained(
            model_name,
            config=config,
            torch_dtype=torch.float16,
            device_map="auto",
            cache_dir=cache_dir,
            token=token
        ) if "Qwen" in model_name else AutoModelForCausalLM.from_pretrained(
            model_name,
            config=config,
            # torch_dtype=torch.float16,
            device_map="auto",
            cache_dir=cache_dir,
        )

        # Load LoRA adapter if provided
        if self.adapter_path:
            from peft import PeftModel
            print(f"Loading LoRA adapter from: {self.adapter_path}")
            model = PeftModel.from_pretrained(model, self.adapter_path)

        return (tokenizer, model)

    def get_utils(self):
        return self.utils

    def generate_cot_response(self, question_id, question, max_new_tokens=4096, do_sample=True):
        final_response = self.generate_cot_response_full(question_id, question,
                                                         max_new_tokens=max_new_tokens, do_sample=do_sample)
        return final_response.basic_pair

    def generate_cot_response_batch(self, question_ids, questions, max_new_tokens=4096):
        """Generate chain-of-thought responses for multiple questions in batch."""
        responses = self.generate_cot_response_full_batch(question_ids, questions, max_new_tokens)
        return [response.basic_pair for response in responses]

    def make_prompt(self, question_id, question, custom_instruction=None):
        prompt_builder = self.component_factory.make_prompt_builder(
            invokes_cot=True
        )
        prompt_builder.add_user_message(question, custom_instruction)
        prompt_builder.add_cot_mode()
        return prompt_builder.make_prompt(self.tokenizer)

    def make_prompt_no_cot(self, question_id, question):
        prompt_builder = self.component_factory.make_prompt_builder(
            invokes_cot=False
        )
        prompt_builder.add_user_message(question)
        return prompt_builder.make_prompt(self.tokenizer)

    def do_generate(self, question_id, prompt, max_new_tokens=4096, do_sample=True):
        """Generate a response using Chain-of-Thought (CoT) prompting."""
        model_config = ModelConfig.get(self.model_name)

        generate_kwargs = model_config.get("generate_kwargs", {})

        inputs = self.tokenizer(prompt, return_tensors="pt").to(self.model.device)
        output = self.model.generate(
            **inputs,
            max_new_tokens=max_new_tokens,
            do_sample=do_sample,
            eos_token_id=self.tokenizer.eos_token_id,
            pad_token_id=self.tokenizer.eos_token_id,
            output_scores=True,
            return_dict_in_generate=True,
            **generate_kwargs,
        )
        return output

    def do_generate_batch(self, question_ids, prompts, max_new_tokens=4096, do_sample=True):
        """Generate responses for multiple prompts in batch using Chain-of-Thought (CoT) prompting."""
        model_config = ModelConfig.get(self.model_name)

        # Validate inputs
        if not prompts:
            raise ValueError("Empty prompts list provided to do_generate_batch")

        if len(question_ids) != len(prompts):
            raise ValueError(f"Mismatch between question_ids ({len(question_ids)}) and prompts ({len(prompts)})")

        # Tokenize all prompts at once
        try:
            inputs = self.tokenizer(prompts, return_tensors="pt", padding=True, truncation=True).to(self.model.device)
        except Exception as e:
            print(f"Batch tokenization failed: {e}")
            print(f"Number of prompts: {len(prompts)}")
            print(f"First prompt: {prompts[0] if prompts else 'None'}")
            print("Falling back to individual tokenization...")

            # Fallback: tokenize individually and combine
            input_ids = []
            attention_masks = []
            for prompt in prompts:
                tokenized = self.tokenizer(prompt, return_tensors="pt", padding=True, truncation=True)
                input_ids.append(tokenized["input_ids"])
                attention_masks.append(tokenized["attention_mask"])

            # Pad to same length
            max_length = max(ids.shape[1] for ids in input_ids)
            padded_input_ids = []
            padded_attention_masks = []

            for ids, mask in zip(input_ids, attention_masks):
                pad_length = max_length - ids.shape[1]
                if pad_length > 0:
                    padded_ids = torch.cat(
                        [ids, torch.full((1, pad_length), self.tokenizer.pad_token_id, dtype=ids.dtype)], dim=1)
                    padded_mask = torch.cat([mask, torch.zeros((1, pad_length), dtype=mask.dtype)], dim=1)
                else:
                    padded_ids = ids
                    padded_mask = mask
                padded_input_ids.append(padded_ids)
                padded_attention_masks.append(padded_mask)

            inputs = {
                "input_ids": torch.cat(padded_input_ids, dim=0).to(self.model.device),
                "attention_mask": torch.cat(padded_attention_masks, dim=0).to(self.model.device)
            }

        generate_kwargs = model_config.get("generate_kwargs", {})

        output = self.model.generate(
            **inputs,
            max_new_tokens=max_new_tokens,
            do_sample=do_sample,
            eos_token_id=self.tokenizer.eos_token_id,
            pad_token_id=self.tokenizer.eos_token_id,
            output_scores=True,
            return_dict_in_generate=True,
            **generate_kwargs,
        )
        return output

    def get_log_probs(self, sequences: torch.Tensor):
        with torch.no_grad():
            outputs = self.model(input_ids=sequences)
            log_probs = torch.nn.functional.log_softmax(outputs.logits, dim=-1)
        return log_probs

    def get_log_probs_batch(self, sequences_list: List[torch.Tensor]):
        """Get log probabilities for multiple sequences in batch."""
        with torch.no_grad():
            # Stack all sequences into a single batch
            # Pad sequences to the same length
            max_length = max(seq.shape[1] for seq in sequences_list)
            padded_sequences = []

            for seq in sequences_list:
                if seq.shape[1] < max_length:
                    # Pad with pad_token_id
                    pad_length = max_length - seq.shape[1]
                    padding = torch.full((seq.shape[0], pad_length), self.tokenizer.pad_token_id,
                                         dtype=seq.dtype, device=seq.device)
                    padded_seq = torch.cat([seq, padding], dim=1)
                else:
                    padded_seq = seq
                padded_sequences.append(padded_seq)

            # Stack into batch
            batch_sequences = torch.cat(padded_sequences, dim=0)

            # Get log probabilities for the entire batch
            outputs = self.model(input_ids=batch_sequences)
            log_probs = torch.nn.functional.log_softmax(outputs.logits, dim=-1)

            # Split back into individual sequences
            log_probs_list = []
            start_idx = 0
            for seq in sequences_list:
                end_idx = start_idx + seq.shape[0]
                log_probs_list.append(log_probs[start_idx:end_idx])
                start_idx = end_idx

            return log_probs_list

    def do_split(self, sequences, prompt, expect_cot=True):
        """
        Split the output into three parts: question, CoT, and answer.
        FIXED: Only extracts model's generated CoT, not ICL examples.
        """
        model_config = ModelConfig.get(self.model_name)

        if "begin_think" in model_config:
            begin_think = model_config["begin_think"]
            end_think = model_config["end_think"]

            # Get the full response
            full = self.tokenizer.decode(sequences[0], skip_special_tokens=False)

            # CRITICAL FIX: Extract only the generated portion
            input_tokens = self.tokenizer(prompt, return_tensors="pt")
            prompt_length = len(input_tokens.input_ids[0])

            # Get only the model's generated tokens (after the prompt)
            generated_tokens = sequences[0][prompt_length:]
            generated_text = self.tokenizer.decode(generated_tokens, skip_special_tokens=False)

            # Extract question from prompt (for compatibility)
            question = prompt.strip()

            # Parse the generated text
            # The prompt builder adds <think> at the end, so generated text should be: cot_content</think>answer
            try:
                # Split on the end think token
                parts = generated_text.split(end_think, 1)
                if len(parts) == 2:
                    cot = parts[0].strip()  # Everything before </think>
                    answer = parts[1].strip()  # Everything after </think>
                else:
                    if expect_cot:
                        raise RuntimeError("Not enough pieces to split, probably ran out of tokens")
                    else:
                        cot = ""
                        answer = generated_text.strip()
            except Exception as e:
                raise RuntimeError(
                    f"Failed to extract CoT from generated text: {generated_text[:100]}... Error: {e}"
                )

        elif "fuzzy_end_think_list" in model_config:
            # This path was already correct - it only looks at generated tokens
            input_tokens = self.tokenizer(prompt, return_tensors="pt")
            full = self.tokenizer.decode(sequences[0], skip_special_tokens=False)
            question = self.tokenizer.decode(
                sequences[0][:len(input_tokens.input_ids[0])], skip_special_tokens=True).strip()
            cot_and_answer = self.tokenizer.decode(
                sequences[0][len(input_tokens.input_ids[0]):], skip_special_tokens=True)

            end_think_list = model_config["fuzzy_end_think_list"]
            for end_think in end_think_list:
                pieces = cot_and_answer.split(end_think, 1)
                if len(pieces) == 2:
                    cot = pieces[0].strip()
                    answer = pieces[1].strip()
                    break
            else:
                raise RuntimeError(
                    f"Failed to extract CoT (no end think token in {end_think_list}) from: {full}"
                    f"Model {self.model_name} did not generate known fuzzy split sequence in "
                    f"{model_config['fuzzy_end_think_list']}"
                )

        return (question, cot, answer)

    def generate_cot_response_full(self, question_id, question, max_new_tokens=4096, do_sample=True):
        """Generate a response using Chain-of-Thought (CoT) prompting."""
        prompt = self.make_prompt(question_id, question)
        output = self.do_generate(question_id, prompt,
                                  max_new_tokens=max_new_tokens, do_sample=do_sample)
        sequences = output.sequences

        raw_output = self.tokenizer.decode(sequences[0], skip_special_tokens=False)

        (_, cot, answer) = self.do_split(sequences, prompt)

        return ModelResponse(
            question_id=question_id,
            question=question,
            prompt=prompt,
            cot=cot,
            answer=answer,
            raw_output=raw_output)

    def evaluate_cot_response(self, question_id, prompt, response, max_new_tokens=4096, to_device=None):
        """Generate a response using Chain-of-Thought (CoT) prompting."""
        response_tokens = self.utils.encode_to_tensor(response, to_device=to_device)

        (question, cot, answer) = self.do_split(response_tokens, prompt)

        return ModelResponse(
            question_id=question_id,
            question=question,  # NOTE: this question is not fully parsed, contains make_prompt stuff
            prompt=prompt,
            cot=cot,
            answer=answer,
            raw_output=response)

    def generate_cot_response_full_batch(self, question_ids, questions, max_new_tokens=4096):
        """Generate responses for multiple questions in batch using Chain-of-Thought (CoT) prompting."""
        # Validate inputs
        if not question_ids or not questions:
            raise ValueError("Empty question_ids or questions list provided")

        if len(question_ids) != len(questions):
            raise ValueError(f"Mismatch between question_ids ({len(question_ids)}) and questions ({len(questions)})")

        # Create prompts for all questions
        prompts = []
        for qid, question in zip(question_ids, questions):
            if not question or question.strip() == "":
                raise ValueError(f"Empty question for question_id {qid}")
            prompt = self.make_prompt(qid, question)
            if not prompt or prompt.strip() == "":
                raise ValueError(f"Empty prompt generated for question_id {qid}")
            prompts.append(prompt)

        # Generate responses in batch
        output = self.do_generate_batch(question_ids, prompts, max_new_tokens)
        sequences = output.sequences

        # Process each response
        responses = []
        for i, (question_id, question, prompt) in enumerate(zip(question_ids, questions, prompts)):
            raw_output = self.tokenizer.decode(sequences[i], skip_special_tokens=True)

            try:
                (question_part, cot, answer) = self.do_split(sequences[i:i + 1])

                response = ModelResponse(
                    question_id=question_id,
                    question=question,
                    prompt=prompt,
                    cot=cot,
                    answer=answer,
                    raw_output=raw_output
                )
                responses.append(response)
            except RuntimeError as e:
                # Handle cases where splitting fails
                print(f"Warning: Failed to split response for question {question_id}: {e}")
                response = ModelResponse(
                    question_id=question_id,
                    question=question,
                    prompt=prompt,
                    cot="",
                    answer=raw_output,
                    raw_output=raw_output
                )
                responses.append(response)

        return responses

    def _split_on_tokens(self, lst, token_list):
        """Split a list into sublists, using 'token' as the delimiter (token is not included in results)."""
        result = []
        current = []
        for item in lst:
            if item in token_list:
                result.append(current)
                current = []
            else:
                current.append(item)
        result.append(current)
        return result

    def _get_token_id(self, token):
        token_id = self.tokenizer.convert_tokens_to_ids(token)
        if (token_id is None):
            print(f"ERROR: model {self.model_name} does not support {token} token")
            exit(1)
        return token_id

    def get_think_tokens(self):
        model_config = ModelConfig.get(self.model_name)

        if "begin_think" in model_config:
            # Tokenize the begin_think and end_think strings to get all token IDs
            begin_think_text = model_config["begin_think"]
            end_think_text = model_config["end_think"]

            # Encode to get token IDs (returns tensor, so convert to list)
            begin_think_tokens = self.tokenizer.encode(begin_think_text, add_special_tokens=True)
            end_think_tokens = self.tokenizer.encode(end_think_text, add_special_tokens=True)

            # Convert to lists if they're tensors
            if hasattr(begin_think_tokens, 'tolist'):
                begin_think_tokens = begin_think_tokens.tolist()
            if hasattr(end_think_tokens, 'tolist'):
                end_think_tokens = end_think_tokens.tolist()

            return (begin_think_tokens, end_think_tokens)
        elif "fuzzy_end_think_list" in model_config:
            end_think_list = model_config["fuzzy_end_think_list"]
            end_think_tokens = []
            for end_think in end_think_list:
                tokens = self.tokenizer.encode(end_think, add_special_tokens=True)
                if hasattr(tokens, 'tolist'):
                    tokens = tokens.tolist()
                end_think_tokens.extend(tokens)
            return ([], end_think_tokens)
    def generate_no_cot_response_full(self, question_id, question, max_new_tokens=4096, do_sample=True):
        """Generate a response without any Chain-of-Thought reasoning"""
        # Use the no-CoT prompt builder
        prompt_builder = self.component_factory.make_prompt_builder(invokes_cot=False)
        prompt_builder.add_user_message(question)
        prompt = prompt_builder.make_prompt(self.tokenizer)

        # Generate response
        output = self.do_generate(question_id, prompt, max_new_tokens=max_new_tokens, do_sample=do_sample)
        sequences = output.sequences

        raw_output = self.tokenizer.decode(sequences[0], skip_special_tokens=False)

        # For no-CoT, the entire generated text is the answer (no splitting needed)
        input_tokens = self.tokenizer(prompt, return_tensors="pt")
        prompt_length = len(input_tokens.input_ids[0])
        generated_tokens = sequences[0][prompt_length:]
        answer = self.tokenizer.decode(generated_tokens, skip_special_tokens=True).strip()

        # For no-CoT responses, cot is empty
        return ModelResponse(
            question_id=question_id,
            question=question,
            prompt=prompt,
            cot="",  # No CoT
            answer=answer,
            raw_output=raw_output
        )

    def do_split_no_cot(self, sequences, prompt):
        """Handle splitting for no-CoT responses where there are no think tokens"""
        # Get the generated portion only
        input_tokens = self.tokenizer(prompt, return_tensors="pt")
        prompt_length = len(input_tokens.input_ids[0])

        # Extract question from prompt
        question = prompt.strip()

        # Everything generated is the answer (no CoT)
        generated_tokens = sequences[0][prompt_length:]
        answer = self.tokenizer.decode(generated_tokens, skip_special_tokens=True).strip()

        return (question, "", answer)  # Empty string for CoT


if __name__ == "__main__":
    question = "How can one decide the best time to buy a house in Boston?"
    print("Prompt: " + question.encode('unicode_escape').decode())

    model = CoTModel("Qwen/Qwen3-1.7B", cache_dir="/tmp/cache2")
    (cot, answer) = model.generate_cot_response(1, question)
    print("\n")
    print("CoT: " + cot.encode('unicode_escape').decode())
    print("\n")
    print("Answer: " + answer.encode('unicode_escape').decode())
    print("\n")
