from transformers import AutoTokenizer, AutoModelForCausalLM
from transformers import AutoConfig
import torch
from dataclasses import dataclass
from token_utils import TokenUtils
from typing import Optional
from config import ModelConfig

@dataclass
class ModelResponse:
    """
    question: original question
    prompt: Question: {question}+{custom_instruction}+<think>
    cot: chain of thought
    answer: answer generated by the model
    """
    question_id: Optional[str]
    question: str
    prompt: str
    cot: str
    answer: str
    raw_output: str

    def __post_init__(self):
        self.basic_pair = (self.cot, self.answer)

    def old__str__(self):
        return f"""
ModelResponse(
    Question: {self.question},
    Prompt: {self._encode(self.prompt)}
    CoT: {self._encode(self.cot)}
    Answer: {self._encode(self.answer)}
)
"""

    def print(self):
        print(f"Question: {self._encode(self.question)}")
        print("\n")
        print(f"Prompt: {self._encode(self.prompt)}")
        print("\n")
        print("CoT: " + self._encode(self.cot))
        print("\n")
        print(f"Answer: {self._encode(self.answer)}")
        print("\n")

class Model:
    def __init__(self, model_name: str, cache_dir="/tmp/cache"):
        self.model_name = model_name
        self.cache_dir = cache_dir

    def get_utils(self):
        raise NotImplementedError("Subclasses must implement this method")

    def make_prompt(self, question_id, question, custom_instruction="Let's think step by step."):
        raise NotImplementedError("Subclasses must implement this method")

    def do_generate(self, question_id, prompt, max_new_tokens=4096):
        raise NotImplementedError("Subclasses must implement this method")

    def generate_cot_response(self, question_id, question, max_new_tokens=4096):
        raise NotImplementedError("Subclasses must implement this method")

    def evaluate_cot_response(self, question_id, prompt, max_new_tokens=4096):
        raise NotImplementedError("Subclasses must implement this method")

    def evaluate_cot_response_from_tokens(self, question_id, prompt_tokens: torch.Tensor, max_new_tokens=4096):
        raise NotImplementedError("Subclasses must implement this method")

    def get_log_probs(self, sequences: torch.Tensor):
        raise NotImplementedError("Subclasses must implement this method")

    def do_split(self, sequences):
        raise NotImplementedError("Subclasses must implement this method")

class CoTModel(Model):
    def __init__(self, model_name: str, cache_dir="/tmp/cache"):
        super().__init__(model_name, cache_dir)

        if not ModelConfig.is_supported(model_name):
            print(f"ERROR: model {model_name} is not in supported list {ModelConfig.SUPPORTED_MODELS}")
            exit(1)

        try:
            (self.tokenizer, self.model) = self._load_model(model_name, cache_dir)
            self.utils = TokenUtils(self.model, self.tokenizer)
        except Exception as e:
            print(f"Error loading model {model_name}: {e}")
            raise

    def _load_model(self, model_name, cache_dir):
        config = AutoConfig.from_pretrained(
            model_name,
            cache_dir=cache_dir,
            trust_remote_code=True,
        )

        tokenizer = AutoTokenizer.from_pretrained(
            model_name,
            cache_dir=cache_dir,
        )
        model = AutoModelForCausalLM.from_pretrained(
            model_name,
            config=config,
            torch_dtype=torch.float16,
            device_map="auto",
            cache_dir=cache_dir,
        )
        return (tokenizer, model)

    def get_utils(self):
        return self.utils

    def generate_cot_response(self, question_id, question, max_new_tokens=10000):
        final_response = self.generate_cot_response_full(question_id, question, max_new_tokens)
        return final_response.basic_pair

    def make_prompt(self, question_id, question, custom_instruction="Let's think step by step."):
        model_config = ModelConfig.get(self.model_name)
        history = [
            {"role": "user", "content": f"Question: {question}\n{custom_instruction}"},
        ]

        # This is the default, unless manually adding an assistant role section
        continue_final_message = False

        if "begin_think" in model_config:
            if (self.model_name == "deepseek-ai/DeepSeek-R1-Distill-Qwen-1.5B"):
                history.append({"role": "assistant", "content": "<think>"})
                continue_final_message = True
            else:
                pass  # default to making a new assistant role section
        elif "fuzzy_end_think_list" in model_config:
            # For Gemma, use default behavior
            pass
        else:
            print(f"ERROR: model {self.model_name} missing CoT separator config")
            exit(1)

        # Handle Gemma-2 specifically
        if self.model_name == "google/gemma-2-2b":
            # Create proper Gemma format manually since the model generates repetitive tokens
            prompt = f"<start_of_turn>user\nQuestion: {question}\n{custom_instruction}<end_of_turn>\n<start_of_turn>model\n"
            return prompt
        else:
            prompt = self.tokenizer.apply_chat_template(history,
                                                        tokenize=False,
                                                        add_generation_prompt=not continue_final_message,
                                                        continue_final_message=continue_final_message)
            return prompt


    def do_generate(self, question_id, prompt, max_new_tokens=4096):
        """Generate a response using Chain-of-Thought (CoT) prompting."""
        model_config = ModelConfig.get(self.model_name)

        generate_kwargs = model_config.get("generate_kwargs")

        inputs = self.tokenizer(prompt, return_tensors="pt").to(self.model.device)
        output = self.model.generate(
            **inputs,
            max_new_tokens=max_new_tokens,
            do_sample=True,
            eos_token_id=self.tokenizer.eos_token_id,
            pad_token_id=self.tokenizer.eos_token_id,
            output_scores=True,
            return_dict_in_generate=True,
            **generate_kwargs,
        )
        return output

    def get_log_probs(self, sequences: torch.Tensor):
        with torch.no_grad():
            outputs = self.model(input_ids=sequences)
            log_probs = torch.nn.functional.log_softmax(outputs.logits, dim=-1)
        return log_probs

    def do_split(self, sequences, prompt):
        model_config = ModelConfig.get(self.model_name)

        # should split the output into three parts: question, the chain of thought and the answer
        if("begin_think" in model_config):
            begin_think = model_config["begin_think"]
            end_think = model_config["end_think"]

            full = self.tokenizer.decode(sequences[0], skip_special_tokens=True)
            try:
                (question, cot_and_answer) = full.split(begin_think, 1)
                (cot, answer) = cot_and_answer.split(end_think, 1)
            except ValueError:
                raise RuntimeError(
                    f"Failed to extract CoT (no begin/end think token) from: {full}"
                )

            question = question.strip()
            cot = cot.strip()
            answer = answer.strip()

        elif("fuzzy_end_think_list" in model_config):
            full = self.tokenizer.decode(sequences[0], skip_special_tokens=False)
            question = full[0:len(prompt)].strip()
            cot_and_answer = full[len(prompt):]

            end_think_list = model_config["fuzzy_end_think_list"]
            for end_think in end_think_list:
                pieces = cot_and_answer.split(end_think, 1)
                if len(pieces) == 2:
                    cot = pieces[0].strip()
                    answer = pieces[1].strip()
                    break
            else:
                raise RuntimeError(
                    f"Failed to extract CoT (no end think token in {end_think_list}) from: {full}"
                    f"Model {self.model_name} did not generate known fuzzy split sequence in "
                    f"{model_config['fuzzy_end_think_list']}"
                )

        return (question, cot, answer)

    def generate_cot_response_full(self, question_id, question, max_new_tokens=4096):
        """Generate a response using Chain-of-Thought (CoT) prompting."""
        prompt = self.make_prompt(question_id, question)
        output = self.do_generate(question_id, prompt, max_new_tokens)
        sequences = output.sequences

        raw_output = self.tokenizer.decode(sequences[0], skip_special_tokens=True)

        (question, cot, answer) = self.do_split(sequences, prompt)

        return ModelResponse(
            question_id=question_id,
            question=question,
            prompt=prompt,
            cot=cot,
            answer=answer,
            raw_output=raw_output)

    def evaluate_cot_response(self, question_id, prompt, max_new_tokens=4096):
        """Generate a response using Chain-of-Thought (CoT) prompting."""
        prompt_tokens = self.utils.encode_to_tensor(prompt)
        log_probs = self.get_log_probs(prompt_tokens)

        raw_output = self.tokenizer.decode(prompt_tokens[0], skip_special_tokens=True)

        (question, cot, answer) = self.do_split(prompt_tokens, prompt)

        return ModelResponse(
            question_id=question_id,
            question=question,
            prompt=prompt,
            cot=cot,
            answer=answer,
            raw_output=raw_output)

    def _split_on_tokens(self, lst, token_list):
        """Split a list into sublists, using 'token' as the delimiter (token is not included in results)."""
        result = []
        current = []
        for item in lst:
            if item in token_list:
                result.append(current)
                current = []
            else:
                current.append(item)
        result.append(current)
        return result

    def _get_token_id(self, token):
        token_id = self.tokenizer.convert_tokens_to_ids(token)
        if(token_id is None):
            print(f"ERROR: model {self.model_name} does not support {token} token")
            exit(1)
        return token_id

    def get_think_tokens(self):
        model_config = ModelConfig.get(self.model_name)

        begin_think = self._get_token_id(model_config["begin_think"])
        end_think = self._get_token_id(model_config["end_think"])
        return (begin_think, end_think)

if __name__ == "__main__":
    question = "What is the capital of Morocco?"
    print("Prompt: " + question.encode('unicode_escape').decode())

    model = CoTModel("google/gemma-2-2b", cache_dir="/tmp/cache2")
    (cot, answer) = model.generate_cot_response(1, question)
    print("\n")
    print("CoT: " + cot.encode('unicode_escape').decode())
    print("\n")
    print("Answer: " + answer.encode('unicode_escape').decode())
    print("\n")
    #print("Test the make_prompt function:)
    model.make_prompt(1, question)
